// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/mastertinner/s3manager/internal/app/s3manager"
	"github.com/minio/minio-go"
	"io"
	"sync"
)

// Ensure, that S3Mock does implement s3manager.S3.
// If this is not the case, regenerate this file with moq.
var _ s3manager.S3 = &S3Mock{}

// S3Mock is a mock implementation of s3manager.S3.
//
//     func TestSomethingThatUsesS3(t *testing.T) {
//
//         // make and configure a mocked s3manager.S3
//         mockedS3 := &S3Mock{
//             GetObjectFunc: func(bucketName string, objectName string, opts minio.GetObjectOptions) (*minio.Object, error) {
// 	               panic("mock out the GetObject method")
//             },
//             ListBucketsFunc: func() ([]minio.BucketInfo, error) {
// 	               panic("mock out the ListBuckets method")
//             },
//             ListObjectsV2Func: func(bucketName string, objectPrefix string, recursive bool, doneCh <-chan struct{}) <-chan minio.ObjectInfo {
// 	               panic("mock out the ListObjectsV2 method")
//             },
//             MakeBucketFunc: func(bucketName string, location string) error {
// 	               panic("mock out the MakeBucket method")
//             },
//             PutObjectFunc: func(bucketName string, objectName string, reader io.Reader, objectSize int64, opts minio.PutObjectOptions) (int64, error) {
// 	               panic("mock out the PutObject method")
//             },
//             RemoveBucketFunc: func(bucketName string) error {
// 	               panic("mock out the RemoveBucket method")
//             },
//             RemoveObjectFunc: func(bucketName string, objectName string) error {
// 	               panic("mock out the RemoveObject method")
//             },
//         }
//
//         // use mockedS3 in code that requires s3manager.S3
//         // and then make assertions.
//
//     }
type S3Mock struct {
	// GetObjectFunc mocks the GetObject method.
	GetObjectFunc func(bucketName string, objectName string, opts minio.GetObjectOptions) (*minio.Object, error)

	// ListBucketsFunc mocks the ListBuckets method.
	ListBucketsFunc func() ([]minio.BucketInfo, error)

	// ListObjectsV2Func mocks the ListObjectsV2 method.
	ListObjectsV2Func func(bucketName string, objectPrefix string, recursive bool, doneCh <-chan struct{}) <-chan minio.ObjectInfo

	// MakeBucketFunc mocks the MakeBucket method.
	MakeBucketFunc func(bucketName string, location string) error

	// PutObjectFunc mocks the PutObject method.
	PutObjectFunc func(bucketName string, objectName string, reader io.Reader, objectSize int64, opts minio.PutObjectOptions) (int64, error)

	// RemoveBucketFunc mocks the RemoveBucket method.
	RemoveBucketFunc func(bucketName string) error

	// RemoveObjectFunc mocks the RemoveObject method.
	RemoveObjectFunc func(bucketName string, objectName string) error

	// calls tracks calls to the methods.
	calls struct {
		// GetObject holds details about calls to the GetObject method.
		GetObject []struct {
			// BucketName is the bucketName argument value.
			BucketName string
			// ObjectName is the objectName argument value.
			ObjectName string
			// Opts is the opts argument value.
			Opts minio.GetObjectOptions
		}
		// ListBuckets holds details about calls to the ListBuckets method.
		ListBuckets []struct {
		}
		// ListObjectsV2 holds details about calls to the ListObjectsV2 method.
		ListObjectsV2 []struct {
			// BucketName is the bucketName argument value.
			BucketName string
			// ObjectPrefix is the objectPrefix argument value.
			ObjectPrefix string
			// Recursive is the recursive argument value.
			Recursive bool
			// DoneCh is the doneCh argument value.
			DoneCh <-chan struct{}
		}
		// MakeBucket holds details about calls to the MakeBucket method.
		MakeBucket []struct {
			// BucketName is the bucketName argument value.
			BucketName string
			// Location is the location argument value.
			Location string
		}
		// PutObject holds details about calls to the PutObject method.
		PutObject []struct {
			// BucketName is the bucketName argument value.
			BucketName string
			// ObjectName is the objectName argument value.
			ObjectName string
			// Reader is the reader argument value.
			Reader io.Reader
			// ObjectSize is the objectSize argument value.
			ObjectSize int64
			// Opts is the opts argument value.
			Opts minio.PutObjectOptions
		}
		// RemoveBucket holds details about calls to the RemoveBucket method.
		RemoveBucket []struct {
			// BucketName is the bucketName argument value.
			BucketName string
		}
		// RemoveObject holds details about calls to the RemoveObject method.
		RemoveObject []struct {
			// BucketName is the bucketName argument value.
			BucketName string
			// ObjectName is the objectName argument value.
			ObjectName string
		}
	}
	lockGetObject     sync.RWMutex
	lockListBuckets   sync.RWMutex
	lockListObjectsV2 sync.RWMutex
	lockMakeBucket    sync.RWMutex
	lockPutObject     sync.RWMutex
	lockRemoveBucket  sync.RWMutex
	lockRemoveObject  sync.RWMutex
}

// GetObject calls GetObjectFunc.
func (mock *S3Mock) GetObject(bucketName string, objectName string, opts minio.GetObjectOptions) (*minio.Object, error) {
	if mock.GetObjectFunc == nil {
		panic("S3Mock.GetObjectFunc: method is nil but S3.GetObject was just called")
	}
	callInfo := struct {
		BucketName string
		ObjectName string
		Opts       minio.GetObjectOptions
	}{
		BucketName: bucketName,
		ObjectName: objectName,
		Opts:       opts,
	}
	mock.lockGetObject.Lock()
	mock.calls.GetObject = append(mock.calls.GetObject, callInfo)
	mock.lockGetObject.Unlock()
	return mock.GetObjectFunc(bucketName, objectName, opts)
}

// GetObjectCalls gets all the calls that were made to GetObject.
// Check the length with:
//     len(mockedS3.GetObjectCalls())
func (mock *S3Mock) GetObjectCalls() []struct {
	BucketName string
	ObjectName string
	Opts       minio.GetObjectOptions
} {
	var calls []struct {
		BucketName string
		ObjectName string
		Opts       minio.GetObjectOptions
	}
	mock.lockGetObject.RLock()
	calls = mock.calls.GetObject
	mock.lockGetObject.RUnlock()
	return calls
}

// ListBuckets calls ListBucketsFunc.
func (mock *S3Mock) ListBuckets() ([]minio.BucketInfo, error) {
	if mock.ListBucketsFunc == nil {
		panic("S3Mock.ListBucketsFunc: method is nil but S3.ListBuckets was just called")
	}
	callInfo := struct {
	}{}
	mock.lockListBuckets.Lock()
	mock.calls.ListBuckets = append(mock.calls.ListBuckets, callInfo)
	mock.lockListBuckets.Unlock()
	return mock.ListBucketsFunc()
}

// ListBucketsCalls gets all the calls that were made to ListBuckets.
// Check the length with:
//     len(mockedS3.ListBucketsCalls())
func (mock *S3Mock) ListBucketsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockListBuckets.RLock()
	calls = mock.calls.ListBuckets
	mock.lockListBuckets.RUnlock()
	return calls
}

// ListObjectsV2 calls ListObjectsV2Func.
func (mock *S3Mock) ListObjectsV2(bucketName string, objectPrefix string, recursive bool, doneCh <-chan struct{}) <-chan minio.ObjectInfo {
	if mock.ListObjectsV2Func == nil {
		panic("S3Mock.ListObjectsV2Func: method is nil but S3.ListObjectsV2 was just called")
	}
	callInfo := struct {
		BucketName   string
		ObjectPrefix string
		Recursive    bool
		DoneCh       <-chan struct{}
	}{
		BucketName:   bucketName,
		ObjectPrefix: objectPrefix,
		Recursive:    recursive,
		DoneCh:       doneCh,
	}
	mock.lockListObjectsV2.Lock()
	mock.calls.ListObjectsV2 = append(mock.calls.ListObjectsV2, callInfo)
	mock.lockListObjectsV2.Unlock()
	return mock.ListObjectsV2Func(bucketName, objectPrefix, recursive, doneCh)
}

// ListObjectsV2Calls gets all the calls that were made to ListObjectsV2.
// Check the length with:
//     len(mockedS3.ListObjectsV2Calls())
func (mock *S3Mock) ListObjectsV2Calls() []struct {
	BucketName   string
	ObjectPrefix string
	Recursive    bool
	DoneCh       <-chan struct{}
} {
	var calls []struct {
		BucketName   string
		ObjectPrefix string
		Recursive    bool
		DoneCh       <-chan struct{}
	}
	mock.lockListObjectsV2.RLock()
	calls = mock.calls.ListObjectsV2
	mock.lockListObjectsV2.RUnlock()
	return calls
}

// MakeBucket calls MakeBucketFunc.
func (mock *S3Mock) MakeBucket(bucketName string, location string) error {
	if mock.MakeBucketFunc == nil {
		panic("S3Mock.MakeBucketFunc: method is nil but S3.MakeBucket was just called")
	}
	callInfo := struct {
		BucketName string
		Location   string
	}{
		BucketName: bucketName,
		Location:   location,
	}
	mock.lockMakeBucket.Lock()
	mock.calls.MakeBucket = append(mock.calls.MakeBucket, callInfo)
	mock.lockMakeBucket.Unlock()
	return mock.MakeBucketFunc(bucketName, location)
}

// MakeBucketCalls gets all the calls that were made to MakeBucket.
// Check the length with:
//     len(mockedS3.MakeBucketCalls())
func (mock *S3Mock) MakeBucketCalls() []struct {
	BucketName string
	Location   string
} {
	var calls []struct {
		BucketName string
		Location   string
	}
	mock.lockMakeBucket.RLock()
	calls = mock.calls.MakeBucket
	mock.lockMakeBucket.RUnlock()
	return calls
}

// PutObject calls PutObjectFunc.
func (mock *S3Mock) PutObject(bucketName string, objectName string, reader io.Reader, objectSize int64, opts minio.PutObjectOptions) (int64, error) {
	if mock.PutObjectFunc == nil {
		panic("S3Mock.PutObjectFunc: method is nil but S3.PutObject was just called")
	}
	callInfo := struct {
		BucketName string
		ObjectName string
		Reader     io.Reader
		ObjectSize int64
		Opts       minio.PutObjectOptions
	}{
		BucketName: bucketName,
		ObjectName: objectName,
		Reader:     reader,
		ObjectSize: objectSize,
		Opts:       opts,
	}
	mock.lockPutObject.Lock()
	mock.calls.PutObject = append(mock.calls.PutObject, callInfo)
	mock.lockPutObject.Unlock()
	return mock.PutObjectFunc(bucketName, objectName, reader, objectSize, opts)
}

// PutObjectCalls gets all the calls that were made to PutObject.
// Check the length with:
//     len(mockedS3.PutObjectCalls())
func (mock *S3Mock) PutObjectCalls() []struct {
	BucketName string
	ObjectName string
	Reader     io.Reader
	ObjectSize int64
	Opts       minio.PutObjectOptions
} {
	var calls []struct {
		BucketName string
		ObjectName string
		Reader     io.Reader
		ObjectSize int64
		Opts       minio.PutObjectOptions
	}
	mock.lockPutObject.RLock()
	calls = mock.calls.PutObject
	mock.lockPutObject.RUnlock()
	return calls
}

// RemoveBucket calls RemoveBucketFunc.
func (mock *S3Mock) RemoveBucket(bucketName string) error {
	if mock.RemoveBucketFunc == nil {
		panic("S3Mock.RemoveBucketFunc: method is nil but S3.RemoveBucket was just called")
	}
	callInfo := struct {
		BucketName string
	}{
		BucketName: bucketName,
	}
	mock.lockRemoveBucket.Lock()
	mock.calls.RemoveBucket = append(mock.calls.RemoveBucket, callInfo)
	mock.lockRemoveBucket.Unlock()
	return mock.RemoveBucketFunc(bucketName)
}

// RemoveBucketCalls gets all the calls that were made to RemoveBucket.
// Check the length with:
//     len(mockedS3.RemoveBucketCalls())
func (mock *S3Mock) RemoveBucketCalls() []struct {
	BucketName string
} {
	var calls []struct {
		BucketName string
	}
	mock.lockRemoveBucket.RLock()
	calls = mock.calls.RemoveBucket
	mock.lockRemoveBucket.RUnlock()
	return calls
}

// RemoveObject calls RemoveObjectFunc.
func (mock *S3Mock) RemoveObject(bucketName string, objectName string) error {
	if mock.RemoveObjectFunc == nil {
		panic("S3Mock.RemoveObjectFunc: method is nil but S3.RemoveObject was just called")
	}
	callInfo := struct {
		BucketName string
		ObjectName string
	}{
		BucketName: bucketName,
		ObjectName: objectName,
	}
	mock.lockRemoveObject.Lock()
	mock.calls.RemoveObject = append(mock.calls.RemoveObject, callInfo)
	mock.lockRemoveObject.Unlock()
	return mock.RemoveObjectFunc(bucketName, objectName)
}

// RemoveObjectCalls gets all the calls that were made to RemoveObject.
// Check the length with:
//     len(mockedS3.RemoveObjectCalls())
func (mock *S3Mock) RemoveObjectCalls() []struct {
	BucketName string
	ObjectName string
} {
	var calls []struct {
		BucketName string
		ObjectName string
	}
	mock.lockRemoveObject.RLock()
	calls = mock.calls.RemoveObject
	mock.lockRemoveObject.RUnlock()
	return calls
}
